{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\xdani\\\\chat-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport Login from './components/Login';\nimport ChatRoom from './components/ChatRoom';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('https://chat-app-g19c.onrender.com');\nfunction App() {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [username, setUsername] = useState('');\n  const [users, setUsers] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [typingUsers, setTypingUsers] = useState([]);\n  useEffect(() => {\n    // Socket event listeners\n    socket.on('userJoined', data => {\n      setUsers(data.users);\n      addNotification(data.message);\n    });\n    socket.on('userLeft', data => {\n      addNotification(data.message);\n    });\n    socket.on('previousMessages', previousMessages => {\n      setMessages(previousMessages);\n    });\n    socket.on('newMessage', message => {\n      setMessages(prevMessages => [...prevMessages, message]);\n    });\n    socket.on('userTyping', data => {\n      setTypingUsers(prevTyping => {\n        if (!prevTyping.includes(data.user)) {\n          return [...prevTyping, data.user];\n        }\n        return prevTyping;\n      });\n    });\n    socket.on('userStoppedTyping', data => {\n      setTypingUsers(prevTyping => prevTyping.filter(user => user !== data.user));\n    });\n    return () => {\n      socket.off('userJoined');\n      socket.off('userLeft');\n      socket.off('previousMessages');\n      socket.off('newMessage');\n      socket.off('userTyping');\n      socket.off('userStoppedTyping');\n    };\n  }, []);\n  const handleLogin = username => {\n    setUsername(username);\n    setIsLoggedIn(true);\n    socket.emit('join', username);\n  };\n  const sendMessage = message => {\n    socket.emit('sendMessage', {\n      message\n    });\n  };\n  const handleTyping = isTyping => {\n    if (isTyping) {\n      socket.emit('typing');\n    } else {\n      socket.emit('stopTyping');\n    }\n  };\n  const addNotification = message => {\n    const notification = {\n      id: Date.now().toString(),\n      user: 'System',\n      text: message,\n      isNotification: true,\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prevMessages => [...prevMessages, notification]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: !isLoggedIn ? /*#__PURE__*/_jsxDEV(Login, {\n      onLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(ChatRoom, {\n      username: username,\n      users: users,\n      messages: messages,\n      typingUsers: typingUsers,\n      onSendMessage: sendMessage,\n      onTyping: handleTyping\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"X2Hpsytdbwjedzv2SK2BPRfzPro=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","io","Login","ChatRoom","jsxDEV","_jsxDEV","socket","App","_s","isLoggedIn","setIsLoggedIn","username","setUsername","users","setUsers","messages","setMessages","typingUsers","setTypingUsers","on","data","addNotification","message","previousMessages","prevMessages","prevTyping","includes","user","filter","off","handleLogin","emit","sendMessage","handleTyping","isTyping","notification","id","Date","now","toString","text","isNotification","timestamp","toISOString","className","children","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","onSendMessage","onTyping","_c","$RefreshReg$"],"sources":["C:/Users/xdani/chat-app/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport Login from './components/Login';\r\nimport ChatRoom from './components/ChatRoom';\r\nimport './App.css';\r\n\r\nconst socket = io('https://chat-app-g19c.onrender.com');\r\n\r\nfunction App() {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [username, setUsername] = useState('');\r\n  const [users, setUsers] = useState([]);\r\n  const [messages, setMessages] = useState([]);\r\n  const [typingUsers, setTypingUsers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Socket event listeners\r\n    socket.on('userJoined', (data) => {\r\n      setUsers(data.users);\r\n      addNotification(data.message);\r\n    });\r\n\r\n    socket.on('userLeft', (data) => {\r\n      addNotification(data.message);\r\n    });\r\n\r\n    socket.on('previousMessages', (previousMessages) => {\r\n      setMessages(previousMessages);\r\n    });\r\n\r\n    socket.on('newMessage', (message) => {\r\n      setMessages((prevMessages) => [...prevMessages, message]);\r\n    });\r\n\r\n    socket.on('userTyping', (data) => {\r\n      setTypingUsers((prevTyping) => {\r\n        if (!prevTyping.includes(data.user)) {\r\n          return [...prevTyping, data.user];\r\n        }\r\n        return prevTyping;\r\n      });\r\n    });\r\n\r\n    socket.on('userStoppedTyping', (data) => {\r\n      setTypingUsers((prevTyping) => \r\n        prevTyping.filter(user => user !== data.user)\r\n      );\r\n    });\r\n\r\n    return () => {\r\n      socket.off('userJoined');\r\n      socket.off('userLeft');\r\n      socket.off('previousMessages');\r\n      socket.off('newMessage');\r\n      socket.off('userTyping');\r\n      socket.off('userStoppedTyping');\r\n    };\r\n  }, []);\r\n\r\n  const handleLogin = (username) => {\r\n    setUsername(username);\r\n    setIsLoggedIn(true);\r\n    socket.emit('join', username);\r\n  };\r\n\r\n  const sendMessage = (message) => {\r\n    socket.emit('sendMessage', { message });\r\n  };\r\n\r\n  const handleTyping = (isTyping) => {\r\n    if (isTyping) {\r\n      socket.emit('typing');\r\n    } else {\r\n      socket.emit('stopTyping');\r\n    }\r\n  };\r\n\r\n  const addNotification = (message) => {\r\n    const notification = {\r\n      id: Date.now().toString(),\r\n      user: 'System',\r\n      text: message,\r\n      isNotification: true,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    setMessages((prevMessages) => [...prevMessages, notification]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {!isLoggedIn ? (\r\n        <Login onLogin={handleLogin} />\r\n      ) : (\r\n        <ChatRoom\r\n          username={username}\r\n          users={users}\r\n          messages={messages}\r\n          typingUsers={typingUsers}\r\n          onSendMessage={sendMessage}\r\n          onTyping={handleTyping}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}